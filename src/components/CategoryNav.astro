---
import { categories } from '../lib/data/navigation';
import type { Category } from '../lib/types';

interface Props {
  activeCategory?: string;
  activeChapter?: string;
}

const { activeCategory, activeChapter } = Astro.props;
---

<div class="category-nav">
  <!-- <h2 class="nav-title">目录 Contents</h2> -->
  {categories.map(category => (
    <div class="category">
      <button class="category-toggle">
        <span class="category-title">{category.title}</span>
        <svg class="chevron" width="20" height="20" viewBox="0 0 20 20" fill="none">
          <path d="M6 8l4 4 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>
      <div class="chapter-list">
        <ul>
          {category.chapters.map(chapter => (
            <li>
              <a 
                href={chapter.href}
                class:list={[
                  'chapter-link',
                  { active: chapter.href === activeChapter }
                ]}
              >
                <span class="chapter-number">{chapter.number}</span>
                <span class="chapter-title">{chapter.title}</span>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  ))}
</div>

<style>
  .category-nav {
    margin-bottom: 2rem;
  }

  .nav-title {
    font-family: var(--font-chinese);
    font-size: 1.2rem;
    color: var(--color-text-primary);
    margin-bottom: 1rem;
    padding: 0 0.75rem;
  }

  .category {
    margin-bottom: 0.5rem;
  }

  .category-toggle {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: none;
    border: none;
    color: var(--color-text-primary);
    cursor: pointer;
    font-size: 1rem;
    transition: color 0.2s ease;
  }

  .category-toggle:hover {
    color: var(--color-accent);
  }

  .chevron {
    transition: transform 0.3s ease;
  }

  .category.expanded .chevron {
    transform: rotate(180deg);
  }

  .chapter-list {
    height: 0;
    overflow: hidden;
    transition: height 0.3s ease;
  }

  .category.expanded .chapter-list {
    height: auto;
  }

  .chapter-list ul {
    list-style: none;
    padding-left: 1rem;
    margin: 0.5rem 0;
  }

  .chapter-link {
    display: flex;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    color: var(--color-text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.2s ease;
  }

  .chapter-link:hover,
  .chapter-link.active {
    color: var(--color-accent);
  }

  .chapter-number {
    opacity: 0.7;
  }

  .category-title {
    font-family: var(--font-chinese);
  }
</style>

<script>
  class NavigationManager {
    private categoryToggles: NodeListOf<Element>;
    
    constructor() {
      this.categoryToggles = document.querySelectorAll('.category-toggle');
      this.init();
    }

    private init() {
      this.setupCategoryToggles();
      this.expandActiveCategory();
    }

    private setupCategoryToggles() {
      this.categoryToggles.forEach(toggle => {
        toggle.addEventListener('click', () => this.handleToggleClick(toggle));
      });
    }

    private handleToggleClick(toggle: Element) {
      const category = toggle.closest('.category');
      if (!category) return;

      const wasExpanded = category.classList.contains('expanded');
      this.closeAllCategories();
      
      if (!wasExpanded) {
        category.classList.add('expanded');
      }
    }

    private closeAllCategories() {
      document.querySelectorAll('.category').forEach(category => {
        category.classList.remove('expanded');
      });
    }

    private expandActiveCategory() {
      const activeChapter = document.querySelector('.chapter-link.active');
      if (activeChapter) {
        const category = activeChapter.closest('.category');
        if (category) {
          category.classList.add('expanded');
        }
      }
    }
  }

  // Initialize navigation
  new NavigationManager();
</script>